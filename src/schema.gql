# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Tipos de acceso de la sala de chat"""
enum ChatroomAccess {
  PRIVATE
  PUBLIC
}

type ChatroomEntity {
  access: ChatroomAccess!
  adminId: Int
  colorHex: String
  createdAt: DateTime
  description: String
  id: Int
  image: String
  messages: [MessageEntity!]
  name: String
  updatedAt: DateTime
  users: [UserEntity!]
}

input CreateChatroomInput {
  access: String! = "PRIVATE"
  colorHex: String
  description: String
  image: String
  name: String!
  userIds: [String!]! = []
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LogInInput {
  email: String!
  password: String!
}

type LogInResponse {
  user: UserEntity!
}

type MessageEdge {
  cursor: Int!
  node: MessageEntity!
}

type MessageEntity {
  chatroom: ChatroomEntity
  content: String!
  createdAt: DateTime!
  id: Int!
  imageUrl: String
  updatedAt: DateTime
  user: UserEntity!
}

type Mutation {
  addUsersToChatroom(chatroomId: Float!, userIds: [Float!]!): String!
  createChatroom(createChatroomInput: CreateChatroomInput!): ChatroomEntity!
  deleteChatroom(chatroomId: Float!): String!
  enterChatroom(chatroomId: Float!): Boolean!
  leaveChatroom(chatroomId: Float!): Boolean!

  """login user"""
  login(LogInInput: LogInInput!): LogInResponse!

  """logout user"""
  logout: String!

  """refresh token"""
  refreshToken: String!

  """register user"""
  register(RegisterInput: RegisterInput!): RegisterResponse!
  sendMessage(chatroomId: Float!, content: String!, image: Upload): MessageEdge!

  """Update user profile"""
  updateUserProfile(file: Upload, fullname: String!): UserEntity!
  userStartedTypingMutation(chatroomId: Float!): UserEntity!
  userStoppedTypingMutation(chatroomId: Float!): UserEntity!
}

type PageInfo {
  endCursor: Int
  hasNextPage: Boolean!
}

type PaginatedMessage {
  edges: [MessageEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  """Find all users"""
  findAllUsers: [UserEntity!]!

  """Find user by id"""
  findUserById(id: Int!): UserEntity!

  """Get a chatroom by id"""
  getChatroomById(chatroomId: Float!): ChatroomEntity!
  getChatroomsForUser(userId: Float!): [ChatroomEntity!]!
  getMessagesForChatroom(chatroomId: Float!, cursor: Int, take: Int! = 20): PaginatedMessage!
  getUsersOfChatroom(chatroomId: Float!): [UserEntity!]!

  """just return hello"""
  hello: String!
  searchUsers(fullname: String!): [UserEntity!]!
}

input RegisterInput {
  confirmPassword: String!
  email: String!
  fullname: String!
  password: String!
}

type RegisterResponse {
  user: UserEntity
}

type Subscription {
  liveUsersInChatroom(chatroomId: Float!): [UserEntity!]
  newMessage(chatroomId: Int!): MessageEdge
  userStartedTyping(chatroomId: Float!, userId: Float!): UserEntity
  userStoppedTyping(chatroomId: Float!, userId: Float!): UserEntity
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserEntity {
  avatarUrl: String
  createdAt: DateTime
  email: String!
  fullname: String!
  id: Int!
  password: String
  updatedAt: DateTime
}